
# Use this open statement to create an OpenGL view:
/vis/open OGL 800x800-0+3

/vis/viewer/set/autoRefresh false
/vis/verbose errors
#
# Draw geometry:
/vis/drawVolume
# Specify view angle:
/vis/viewer/set/viewpointVector -1 0 0
/vis/viewer/set/lightsVector -1 0 0
#
# Specify style (surface, wireframe, auxiliary edges,...)
/vis/viewer/set/style wireframe
/vis/viewer/set/auxiliaryEdge true
/vis/viewer/set/lineSegmentsPerCircle 100
# Draw smooth trajectories at end of event, showing trajectory points
# as markers 2 pixels wide:
/vis/scene/add/trajectories smooth
/vis/modeling/trajectories/create/drawByCharge
/vis/modeling/trajectories/drawByCharge-0/default/setDrawStepPts true
/vis/modeling/trajectories/drawByCharge-0/default/setStepPtsSize 2
# Draw hits at end of event:
#/vis/scene/add/hits
# To superimpose all of the events from a given run:
/vis/scene/endOfEventAction accumulate
#
# Frame
/vis/set/colour red
/vis/set/lineWidth 2
/vis/scene/add/frame   # Simple frame around the view
/vis/set/colour        # Revert to default colour (white)
/vis/set/lineWidth     # Revert to default line width (1.)
#
# To get nice view
/vis/viewer/set/viewpointThetaPhi 90 0
#
# Re-establish auto refreshing and verbosity:
/vis/viewer/set/autoRefresh true
/vis/verbose warnings
#
# For file-based drivers, use this to create an empty detector view:
#/vis/viewer/flush
/vis/viewer/zoom 1